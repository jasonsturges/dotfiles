#!/usr/bin/env bash

# Dotfiles management script
# Usage: ./dotfiles.sh [install|backup|update]

set -e

DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BACKUP_DIR="$HOME/.dotfiles_backup_$(date +%Y%m%d_%H%M%S)"

# Define your dotfiles as source:destination pairs
DOTFILES_LIST=(
    "zsh/zshrc:$HOME/.zshrc"
    "git/gitconfig:$HOME/.gitconfig"
    "git/gitignore-global:$HOME/.gitignore-global"
    "kitty/kitty.conf:$HOME/.config/kitty/kitty.conf"
    "tmux/tmux.conf:$HOME/.tmux.conf"
    "nvim:$HOME/.config/nvim"
)

create_symlink() {
    local src="$DOTFILES_DIR/$1"
    local dest="$2"
    local dest_dir="$(dirname "$dest")"
    
    # Create destination directory if it doesn't exist
    mkdir -p "$dest_dir"
    
    # Backup existing file/directory if it exists and isn't a symlink
    if [[ -e "$dest" && ! -L "$dest" ]]; then
        echo "Backing up existing $dest"
        mkdir -p "$BACKUP_DIR"
        mv "$dest" "$BACKUP_DIR/"
    fi
    
    # Remove existing symlink
    [[ -L "$dest" ]] && rm "$dest"
    
    # Create new symlink
    ln -sf "$src" "$dest"
    echo "âœ“ Linked $src â†’ $dest"
}

install_dotfiles() {
    echo "Installing dotfiles..."
    
    for entry in "${DOTFILES_LIST[@]}"; do
        src="${entry%%:*}"
        dest="${entry#*:}"
        
        if [[ -f "$DOTFILES_DIR/$src" || -d "$DOTFILES_DIR/$src" ]]; then
            create_symlink "$src" "$dest"
        else
            echo "âš  Warning: $DOTFILES_DIR/$src not found, skipping"
        fi
    done
    
    echo -e "\nâœ… Dotfiles installation complete!"
    [[ -d "$BACKUP_DIR" ]] && echo "ðŸ“¦ Backups stored in: $BACKUP_DIR"
}

backup_dotfiles() {
    echo "Backing up current dotfiles to repository..."
    
    for entry in "${DOTFILES_LIST[@]}"; do
        src="${entry%%:*}"
        source_file="${entry#*:}"
        dest_file="$DOTFILES_DIR/$src"
        dest_dir="$(dirname "$dest_file")"
        
        if [[ -f "$source_file" || -d "$source_file" ]]; then
            # Skip backup if source is a symlink (indicates install mode is active)
            if [[ -L "$source_file" ]]; then
                echo "âš  $source_file is a symlink (install mode), skipping backup"
                continue
            fi
            
            mkdir -p "$dest_dir"
            # Remove existing destination to prevent nesting
            [[ -e "$dest_file" ]] && rm -rf "$dest_file"
            cp -r "$source_file" "$dest_file"
            echo "âœ“ Backed up $source_file â†’ $dest_file"
        else
            echo "âš  $source_file not found, skipping"
        fi
    done
    
    echo -e "\nâœ… Backup complete!"
}

update_dotfiles() {
    echo "Updating dotfiles repository..."
    cd "$DOTFILES_DIR"
    
    if git rev-parse --git-dir > /dev/null 2>&1; then
        git add .
        git commit -m "Update dotfiles - $(date)"
        git push
        echo "âœ… Dotfiles updated and pushed to repository"
    else
        echo "âš  Not a git repository. Initialize with: git init"
    fi
}

show_help() {
    echo "Dotfiles Management Script"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  install    Install dotfiles (create symlinks)"
    echo "  backup     Backup current configs to repository"
    echo "  update     Commit and push changes to repository"
    echo "  help       Show this help message"
    echo ""
    echo "Structure your dotfiles directory like this:"
    echo "  dotfiles/"
    echo "  â”œâ”€â”€ git/"
    echo "  â”‚   â”œâ”€â”€ gitconfig"
    echo "  â”‚   â””â”€â”€ gitignore-global"
    echo "  â”œâ”€â”€ zsh/"
    echo "  â”‚   â””â”€â”€ zshrc"
    echo "  â”œâ”€â”€ tmux/"
    echo "  â”‚   â””â”€â”€ tmux.conf"
    echo "  â””â”€â”€ nvim/"
    echo "      â””â”€â”€ (Neovim config files)"
}

case "${1:-help}" in
    install)
        install_dotfiles
        ;;
    backup)
        backup_dotfiles
        ;;
    update)
        update_dotfiles
        ;;
    help|*)
        show_help
        ;;
esac

